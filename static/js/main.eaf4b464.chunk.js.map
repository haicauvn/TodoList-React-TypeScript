{"version":3,"sources":["Components/TodoTask.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["TodoTask","date","task","completeTask","className","taskName","Date","deadline","toLocaleDateString","year","month","day","Math","ceil","getTime","onClick","App","useState","setTask","setDealine","JSON","parse","localStorage","getItem","todoList","setTodoList","handleChange","event","target","name","value","taskNameToDelete","filter","type","placeholder","onChange","newTask","newToDoList","setItem","stringify","map","key","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0MAwCeA,EAzBE,SAAC,GAAmC,IAP9BC,EAOHC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,aACxB,OACE,sBAAKC,UAAU,OAAf,UACE,sBAAKA,UAAU,UAAf,UACE,+BAAOF,EAAKG,WACZ,+BACG,IAAIC,KAAKJ,EAAKK,UAAUC,mBAAmB,QAAS,CACnDC,KAAM,UACNC,MAAO,QACPC,IAAK,cAGT,gCAnBeV,EAmBMC,EAAKK,SAlB3BN,EAGEW,KAAKC,OAAM,IAAIP,MAAOQ,UAAYb,GAAxB,OAFR,QAmBL,wBACEc,QAAS,WACPZ,EAAaD,EAAKG,WAFtB,mBCmCSW,EA3DC,WAAO,IAAD,EACIC,mBAAiB,IADrB,mBACbf,EADa,KACPgB,EADO,OAEWD,mBAAiB,GAF5B,mBAEbV,EAFa,KAEHY,EAFG,OAGYF,mBAAkBG,KAAKC,MAAMC,aAAaC,QAAQ,UAAY,OAH1E,mBAGbC,EAHa,KAGHC,EAHG,KAKdC,EAAe,SAACC,GACM,SAAtBA,EAAMC,OAAOC,KACfX,EAAQS,EAAMC,OAAOE,OAErBX,EAAW,IAAIb,KAAKqB,EAAMC,OAAOE,OAAOhB,YAatCX,EAAe,SAAC4B,GACpBN,EACED,EAASQ,QAAO,SAAC9B,GACf,OAAOA,EAAKG,UAAY0B,OAK9B,OACE,sBAAK3B,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,sBAAKA,UAAU,iBAAf,UACE,uBACE6B,KAAK,OACLC,YAAY,UACZL,KAAK,OACLC,MAAO5B,EACPiC,SAAUT,IAEZ,uBACEO,KAAK,OACLJ,KAAK,WAELM,SAAUT,OAGd,wBAAQX,QAnCE,WACd,IAAMqB,EAAU,CAAE/B,SAAUH,EAAMK,SAAUA,GACtC8B,EAAW,sBAAOb,GAAP,CAAiBY,IAClCX,EAAYY,GACZnB,EAAQ,IACRI,aAAagB,QAAQ,QAASlB,KAAKmB,UAAUF,IAC7ClB,GAAW,IAAIb,MAAOQ,YA6BlB,oBAEF,qBAAKV,UAAU,WAAf,SACGoB,EAASgB,KAAI,SAACtC,EAAauC,GAC1B,OAAO,cAAC,EAAD,CAAoBvC,KAAMA,EAAMC,aAAcA,GAA/BsC,YC3CjBC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eaf4b464.chunk.js","sourcesContent":["import React from \"react\";\nimport { ITask } from \"../Interfaces\";\n\ninterface Props {\n  task: ITask;\n  completeTask(taskNameToDelete: string): void;\n}\n\nconst calculateDays = (date: number): number => {\n  if (!date) {\n    return 0;\n  }\n  return Math.ceil((new Date().getTime() - date) / (1000 * 60 * 60 * 24));\n};\n\nconst TodoTask = ({ task, completeTask }: Props) => {\n  return (\n    <div className=\"task\">\n      <div className=\"content\">\n        <span>{task.taskName}</span>\n        <span>\n          {new Date(task.deadline).toLocaleDateString(\"en-US\", {\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\",\n          })}\n        </span>\n        <span>{calculateDays(task.deadline)}</span>\n      </div>\n      <button\n        onClick={() => {\n          completeTask(task.taskName);\n        }}\n      >\n        X\n      </button>\n    </div>\n  );\n};\n\nexport default TodoTask;\n","import React, { FC, ChangeEvent, useState } from \"react\";\nimport \"./App.css\";\nimport TodoTask from \"./Components/TodoTask\";\nimport { ITask } from \"./Interfaces\";\n\nconst App: FC = () => {\n  const [task, setTask] = useState<string>(\"\");\n  const [deadline, setDealine] = useState<number>(0);\n  const [todoList, setTodoList] = useState<ITask[]>(JSON.parse(localStorage.getItem('items') || '[]'));\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>): void => {\n    if (event.target.name === \"task\") {\n      setTask(event.target.value);\n    } else {\n      setDealine(new Date(event.target.value).getTime());\n    }\n  };\n\n  const addTask = (): void => {\n    const newTask = { taskName: task, deadline: deadline };\n    const newToDoList = [...todoList, newTask];\n    setTodoList(newToDoList);\n    setTask(\"\");\n    localStorage.setItem('items', JSON.stringify(newToDoList));\n    setDealine(new Date().getTime());\n  };\n\n  const completeTask = (taskNameToDelete: string): void => {\n    setTodoList(\n      todoList.filter((task) => {\n        return task.taskName != taskNameToDelete;\n      })\n    );\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <div className=\"inputContainer\">\n          <input\n            type=\"text\"\n            placeholder=\"Item...\"\n            name=\"task\"\n            value={task}\n            onChange={handleChange}\n          />\n          <input\n            type=\"date\"\n            name=\"deadline\"\n            // value={deadline}\n            onChange={handleChange}\n          />\n        </div>\n        <button onClick={addTask}>Add</button>\n      </div>\n      <div className=\"todoList\">\n        {todoList.map((task: ITask, key: number) => {\n          return <TodoTask key={key} task={task} completeTask={completeTask} />;\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}